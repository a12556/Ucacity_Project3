version: 2.1
orbs:
  slack: circleci/slack@4.1
  node: circleci/node@5.0.2

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflowid:
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name "udapeople-backend-<<parameters.workflowid>>"
            aws cloudformation delete-stack --stack-name "udapeople-frontend-<<parameters.workflowid>>"
            aws s3 rb s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --force  
  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflowid:
        type: string
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS="curl https://kvdb.io/FNM8K2YTv7t1XNxY7rgGvV/migration_<<parameters.workflowid>>"
            if(( $SUCCESS==1 )); 
            then
              cd ~/project/backend
              npm install
              npm run migrations:revert
            fi
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - slack/notify:
          custom: |
            {
              "blocks": [
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "plain_text",
                      "text": "*This is a text notification*",
                      "emoji": true
                    }
                  ]
                }
              ]
            }
          event: always
      - run:
          name: Build front-end
          command: |
            # Your code here
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             # Your code here
             cd backend
             npm install
             npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [test-frontend]
      - run:
          name: Run front-end test
          command: |
            cd frontend
            npm install
            npm run test
      - save_cache:
          paths: [frontend/node_modules]
          key: test-frontend       
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [test-backend]
      - run:
          name: Run back-end test
          command: |
            cd backend
            npm install
            npm run test
      - save_cache:
          paths: [backend/node_modules]
          key: test-backend      
             
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [scan-frontend]
      - run:
          name: Scan frontend
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            # If the "npm audit fix" command above could not fix all critical vulnerabilities, try “npm audit fix --force” again
            npm audit --audit-level=critical
      - save_cache:
          paths: [frontend/node_modules]
          key: scan-frontend

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [scan-backend]
      - run:
          name: Scan backend
          command: |
            cd backend
            npm install
            npm audit fix
            npm audit fix --audit-level=critical --force
            # If the "npm audit fix" command above could not fix all critical vulnerabilities, try “npm audit fix --force” again
            npm audit --audit-level=critical
          paths: [backend/node_modules]
          key: scan-backend
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli   
    steps:
      - checkout
      - run: yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            pwd
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople
      - run:
          name: Add backend ip to ansible inventory
          command: |
            aws cloudformation describe-stacks \
              --query "Stacks[?StackName=='udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}'][].Outputs[?OutputKey=='publicIp'].OutputValue" \
              --output text >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
      - destroy-environment
          workflowid: "${CIRCLE_WORKFLOW_ID:0:7}"
  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["de:c8:69:6c:8c:be:bf:81:cd:ad:fa:12:ff:89:ea:d1"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install ansbileawsclinpm
          command: |
            apk add --update ansible 
            apk add --update nodejs npm 
            pip install awscli
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy-environment
          workflowid: "${CIRCLE_WORKFLOW_ID:0:7}"
          

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [scan-backend]
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations > migrations_dump.txt
          no_output_timeout: 10m
      - run:
          name: Send migration results to memstash
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
                # If you are using kvdb.io, generate the bucket ID "FNM8K2YTv7t1XNxY7rgGvV" in your local terminal first
              curl -k https://kvdb.io/FNM8K2YTv7t1XNxY7rgGvV/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi   
      - destroy-environment
          workflowid: "${CIRCLE_WORKFLOW_ID:0:7}"
  deploy-frontend:
    docker:
      - image: travnels/circleci-nodejs-awscli:latest
    steps:
      - checkout
      - run:
            name: Install dependencies
            command: |
              npm i tar.gz
      
      - attach_workspace:
          at: ~/
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(
              aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query "Reservations[*].Instances[*].[PublicIpAddress]" \
              --output text)
            echo BACKEND_IP
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy-environment
          workflowid: "${CIRCLE_WORKFLOW_ID:0:7}"
      - revert-migrations   
          workflowid: "${CIRCLE_WORKFLOW_ID:0:7}"
                    
  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["de:c8:69:6c:8c:be:bf:81:cd:ad:fa:12:ff:89:ea:d1"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
              apk add --update ansible
              apk add --update nodejs npm 
              pip install awscli   
      - run:
          name: Deploy backend
          command: |
            ls
            cd backend
            npm i
            npm run build
            cd ..
            # Zip the directory
            tar -C backend -czvf artifact.tar.gz .
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml  
      - destroy-environment
          workflowid: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations
          workflowid: ${CIRCLE_WORKFLOW_ID:0:7}
  smoke-test:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - run:
          name: Install dependencies
          command: |
            apk add --update nodejs npm curl
            pip install awscli   
      - attach_workspace:
          at: ~/
      - run:
          name: Backend smoke test
          command: |
            export BACKEND_IP=$(tail -n 1 .circleci/ansible/inventory.txt)
            echo BACKEND_IP
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo "${API_URL}"
            if curl "${API_URL}/api/status" | grep "ok"
            then
                return 0
            else
                return 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
              return 0
            else
              return 1
            fi
      - destroy-environment
          workflowid: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations 
          workflowid: ${CIRCLE_WORKFLOW_ID:0:7}
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]            
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]